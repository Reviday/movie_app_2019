{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","async","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0TA+BeA,MA3Bf,YAAwD,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC1C,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACX,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,UACTD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,wBAAIC,IAAKD,EAAOL,UAAU,kBAAkBI,OAGpD,uBAAGJ,UAAU,kBAAkBH,EAAQU,MAAM,EAAG,KAAhD,UC0CDC,G,iNApDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAEVC,UAAY,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAKAE,IAAMC,IACd,6DANQ,gBAGEL,EAHF,EAERM,KACEA,KAAQN,OAKZ,EAAKO,SAAS,CAAEP,SAAQD,WAAW,IARzB,sC,mFAWVS,KAAKP,c,+BAEG,IAAD,EACuBO,KAAKV,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,6BAASX,UAAU,aAChBU,EAEG,yBAAKV,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAIF,yBAAKA,UAAU,UAEXW,EAAOR,KAAI,SAAAiB,GACT,OACE,kBAAC,EAAD,CACEd,IAAKc,EAAMC,GACXA,GAAID,EAAMC,GACV1B,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAME,mBACdvB,OAAQqB,EAAMrB,kB,GAxClBwB,IAAMC,YCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,a","file":"static/js/main.3d0e9f06.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({year, title, summary, poster, genres}) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title}/>\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"genres\">\r\n                    {genres.map((genre, index) => (\r\n                        <li key={index} className=\"genres__genres\">{genre}</li>\r\n                    ))}\r\n                </ul>\r\n                <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string.isRequired)\r\n}\r\n\r\nexport default Movie;","import React from \"react\"; // react는 당신이 거기에 쓰는 모든 요소를 생성한다는 것.\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies/json?sort_by=rating\"\n    );\n    this.setState({ movies, isLoading: false });\n  };\n  componentDidMount() {\n    this.getMovies();\n  }\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading\n          ? (\n            <div className=\"loader\">\n              <span className=\"loader__text\">Loading...</span>\n            </div>\n          )\n          : (\n            <div className=\"movies\">\n              {\n                movies.map(movie => {\n                  return (\n                    <Movie\n                      key={movie.id}\n                      id={movie.id}\n                      year={movie.year}\n                      title={movie.title}\n                      summary={movie.summary}\n                      poster={movie.medium_cover_image}\n                      genres={movie.genres}\n                    />\n                  );\n                })\n              }\n            </div>\n            )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n\n/*\nclass App extends React.Component { // react는 자동적으로 너의 class compnent의 render method를 실행해! 자동으로!\n  constructor(props) {\n    super(props);\n    console.log('constructor');\n  }\n  state = { // 너가 바꿀 데이터를 넣어\n    count : 0\n  };\n  add = () => { // render function이 호출되도록 코딩해야함\n    this.setState(current => ({count: current.count + 1})) // setState를 호출하면 refresh를 함.\n                // 이것이 여러분이 state를 set할 때, \n                // react에서 외부의 상태에 의존하지 않는 가장 좋은 방법\n  };\n  minus = () => {\n    this.setState(current => ({count: current.count - 1}))\n  };\n  // 너가 setState를 호출할 때마다 react는 다시 render 할거야.\n\n  componentDidMount() {\n    console.log('component rendered');\n  }\n\n  componentDidUpdate() {\n    console.log(\"I'm just updated\");\n  }\n\n  componentWillUnmount() {\n    console.log(\"Goobye, cruel word\");\n  }\n\n  render() {\n    console.log(\"I'm rendering\");\n    return <div>\n      <h1>The number is: {this.state.count}</h1>\n      <button onClick={this.add}>Add</button>\n      <button onClick={this.minus}>Minus</button>\n    </div>\n  }\n  // component가 render 된 후, 호출되는 다른 function들이 존재한다.\n  // 그 중 알아둬야 할 것만 말하면\n  // * Mounting : 태어나는 것과 같다.\n  //        - constructor() : 자바스크립트의 생성자\n  //        - getDerivedStateFromProps() : (다루지 않음)\n  //        - render() \n  //        - componentDidMount() : render 후 실행\n  // * Updating : 일반적인 업데이트를 의미(업데이트의 원인은 너!) => setState를 호출할 때마다 발생!\n  //        - getDerivedStateFromProps() : (다루지 않음)\n  //        - shouldComponentUpdate() : (다루지 않음) - 기본적으로 업데이트를 할지 말지 결정하는 것에 대한 것\n  //        - render()\n  //        - getSnpshotBeforeUpdate() : (다루지 않음 - 니콜라스도 사용한 적 없음.)\n  //        - domponentDidUpdate() \n  // * Unmounting : component가 죽는 것을 의미(페이지를 바꿀 때)\n  //        - componentWillUnmount() : component가 떠날 때 호출된다.\n\n}\n*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('potato'));\n// <App /> => component : HTML을 반환하는 함수"],"sourceRoot":""}